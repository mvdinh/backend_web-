package com.example.api_Train.Service.impl;

import com.example.api_Train.DTO.RequestDTO.DatVe.*;
import com.example.api_Train.DTO.Response.DatVeTau.DatVeResponse;
import com.example.api_Train.Exception.NotFound;
import com.example.api_Train.Repository.*;
import com.example.api_Train.models.*;
import com.example.api_Train.models.HanhKhach;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
public class DatVeServiceImpl {

    @Autowired
    private DatVeRepository datVeRepository;

    @Autowired
    private HanhKhachRepository hanhKhachRepository;

    @Autowired
    private ChuyenTauRepository chuyenTauRepository;

    @Autowired
    private GheRepository gheRepository;

    @Autowired
    private VeTauRepository veTauRepository;

    @Autowired
    private BangGiaRepository giaVeRepository;

    @Autowired
    private NguoiDatVeRepository nguoiDatVeRepository;

    @Autowired
    private TinhTrangVeRepository tinhTrangVeRepository;

    @Autowired
    private ChiTietDatVeRepository chiTietVeTauRepository;

    /**
     * Đặt vé tàu
     * 
     * @param datVeDTO Thông tin đặt vé
     * @return Kết quả đặt vé
     */
    @Transactional
    public DatVeResponse datVe(DatVeDTO datVeDTO) {
        try {
            // Kiểm tra và tìm hoặc tạo đối tượng người đặt vé
            NguoiDatVe nguoiDatVe = findOrCreateNguoiDatVe(datVeDTO.getNguoiDatVeDTO());

            BigDecimal tongTien = BigDecimal.ZERO;
            List<VeTau> danhSachVe = new ArrayList<>();

            // Tạo đối tượng đặt vé trước
            DatVe datVe = new DatVe();
            datVe.setMaNguoiDat(nguoiDatVe);
            datVe.setTrangThai("CONFIRMED");
            datVe.setNgayDat(LocalDateTime.now());
            datVe = datVeRepository.save(datVe);

            // Xử lý chi tiết đặt vé cho từng hành khách
            for (ChiTietDatVeDTO chiTiet : datVeDTO.getChiTietDatVeDTOs()) {
                // Tìm hoặc tạo hành khách
                HanhKhach hanhKhach = findOrCreateHanhKhach(chiTiet.getHanhKhach());

                // Kiểm tra thông tin chuyến tàu
                ChuyenTau chuyenTau = chuyenTauRepository.findById(chiTiet.getVeTau().getMaChuyenTau())
                        .orElseThrow(() -> new NotFound(
                                "Không tìm thấy chuyến tàu với mã: " + chiTiet.getVeTau().getMaChuyenTau()));

                // Kiểm tra thông tin ghế
                Ghe ghe = gheRepository.findById(chiTiet.getVeTau().getMaGhe())
                        .orElseThrow(() -> new NotFound(
                                "Không tìm thấy ghế với mã: " + chiTiet.getVeTau().getMaGhe()));

                // Lấy thông tin giá vé
                BangGia giaVe = giaVeRepository
                        .findByMaChuyenTauAndMaLoaiCho(
                                chuyenTau.getMaChuyenTau(),
                                ghe.getToaTau().getLoaiCho().getMaLoaiCho())
                        .orElseThrow(() -> new NotFound(
                                "Không tìm thấy giá vé với mã chuyến tàu: " + chuyenTau.getMaChuyenTau() +
                                        " và mã loại chỗ: " + ghe.getToaTau().getLoaiCho().getMaLoaiCho()));

                // Tính giá vé theo loại khách
                BigDecimal giaVeChiTiet = tinhGiaVeTheoLoaiKhach(giaVe.getGiaTien(),
                        chiTiet.getHanhKhach().getLoaiKhach().getTenLoaiKhach());

                TinhTrangVe tinhTrangVe = tinhTrangVeRepository.findById(1)
                        .orElseThrow(() -> new NotFound("Không tìm thấy tình trạng vé với id = 1"));

                // Tạo đối tượng vé tàu
                VeTau veTau = createVeTau(hanhKhach, chuyenTau, ghe, giaVe, tinhTrangVe);

                // Tạo chi tiết vé tàu để liên kết đặt vé và vé tàu
                ChiTietDatVe chiTietVeTau = new ChiTietDatVe();
                chiTietVeTau.setDatVe(datVe);
                chiTietVeTau.setVeTau(veTau);
                chiTietVeTau.setTongTienVe(giaVeChiTiet);
                chiTietVeTauRepository.save(chiTietVeTau);

                danhSachVe.add(veTau);

                // Cộng vào tổng tiền
                tongTien = tongTien.add(giaVeChiTiet);
            }

            // Cập nhật tổng tiền cho đặt vé
            datVe.setTongTien(tongTien);
            datVe = datVeRepository.save(datVe);

            // Tạo response
            return createDatVeResponse(datVe, danhSachVe);

        } catch (NotFound e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException("Lỗi trong quá trình đặt vé: " + e.getMessage(), e);
        }
    }

    /**
     * Lấy thông tin đặt vé theo mã đặt vé
     * 
     * @param maDatVe Mã đặt vé
     * @return Thông tin đặt vé
     */
    @Transactional(readOnly = true)
    public DatVeResponse getByMaDatVe(Integer maDatVe) {
        DatVe datVe = datVeRepository.findById(maDatVe)
                .orElseThrow(() -> new NotFound("Không tìm thấy đặt vé với mã: " + maDatVe));

        List<ChiTietDatVe> chiTietList = chiTietVeTauRepository.findByDatVe(datVe);
        List<VeTau> danhSachVe = new ArrayList<>();

        for (ChiTietDatVe chiTiet : chiTietList) {
            danhSachVe.add(chiTiet.getVeTau());
        }

        return createDatVeResponse(datVe, danhSachVe);
    }

    /**
     * Hủy đặt vé
     * 
     * @param maDatVe Mã đặt vé
     * @return Kết quả hủy đặt vé
     */
    @Transactional
    public DatVeResponse huyDatVe(Integer maDatVe) {
        DatVe datVe = datVeRepository.findById(maDatVe)
                .orElseThrow(() -> new NotFound("Không tìm thấy đặt vé với mã: " + maDatVe));

        // Kiểm tra nếu đặt vé đã bị hủy
        if ("CANCELLED".equals(datVe.getTrangThai())) {
            throw new RuntimeException("Đặt vé này đã bị hủy trước đó");
        }

        // Cập nhật trạng thái đặt vé
        datVe.setTrangThai("CANCELLED");
        datVe = datVeRepository.save(datVe);

        // Cập nhật trạng thái các vé tàu
        List<ChiTietDatVe> chiTietList = chiTietVeTauRepository.findByDatVe(datVe);
        List<VeTau> danhSachVe = new ArrayList<>();

        TinhTrangVe tinhTrangHuy = tinhTrangVeRepository.findById(2) // Giả sử id=2 là trạng thái hủy
                .orElseThrow(() -> new NotFound("Không tìm thấy tình trạng vé hủy"));

        for (ChiTietDatVe chiTiet : chiTietList) {
            VeTau veTau = chiTiet.getVeTau();
            veTau.setTinhTrangVe(tinhTrangHuy);
            veTauRepository.save(veTau);
            danhSachVe.add(veTau);
        }

        DatVeResponse response = new DatVeResponse();
        response.setMaDatVe(datVe.getMaDatVe());
        response.setTrangThai("CANCELLED");

        return response;
    }

    /**
     * Tìm hoặc tạo người đặt vé
     */
    private NguoiDatVe findOrCreateNguoiDatVe(NguoiDatVeDTO nguoiDatVeDTO) {
        NguoiDatVe nguoiDatVe = null;
        // Tìm người đặt vé theo CCCD nếu có
        if (nguoiDatVeDTO.getCccd() != null && !nguoiDatVeDTO.getCccd().isEmpty()) {
            nguoiDatVe = nguoiDatVeRepository.findByCccd(nguoiDatVeDTO.getCccd());
        }
        // Nếu không tìm thấy, tạo mới
        if (nguoiDatVe == null) {
            nguoiDatVe = new NguoiDatVe();
            nguoiDatVe.setHoTen(nguoiDatVeDTO.getHoTen());
            nguoiDatVe.setCccd(nguoiDatVeDTO.getCccd());
            nguoiDatVe.setEmail(nguoiDatVeDTO.getEmail());
            nguoiDatVe.setSoDienThoai(nguoiDatVeDTO.getSoDienThoai());
            // Lưu đối tượng đặt vé mới
            nguoiDatVe = nguoiDatVeRepository.save(nguoiDatVe);
        }
        return nguoiDatVe;
    }

    /**
     * Tìm hoặc tạo hành khách
     */
    private HanhKhach findOrCreateHanhKhach(HanhKhachDTO hanhKhachDTO) {
        HanhKhach hanhKhach = null;
        if (hanhKhachDTO.getSoGiayTo() != null && !hanhKhachDTO.getSoGiayTo().isEmpty()) {
            hanhKhach = hanhKhachRepository.findBySoGiayTo(hanhKhachDTO.getSoGiayTo());
        }

        // Nếu không tìm thấy hành khách, tạo mới
        if (hanhKhach == null) {
            hanhKhach = new HanhKhach();
            hanhKhach.setHoTen(hanhKhachDTO.getHoTen());
            hanhKhach.setSoGiayTo(hanhKhachDTO.getSoGiayTo());
            hanhKhach.setNgaySinh(hanhKhachDTO.getNgaySinh());
            hanhKhach.setLoaiKhach(hanhKhachDTO.getLoaiKhach());
            // Lưu hành khách mới
            hanhKhach = hanhKhachRepository.save(hanhKhach);
        }
        return hanhKhach;
    }

    /**
     * Tạo đối tượng vé tàu
     */
    private VeTau createVeTau(HanhKhach hanhKhach, ChuyenTau chuyenTau, Ghe ghe, BangGia giaVe,
            TinhTrangVe tinhTrangVe) {
        VeTau veTau = new VeTau();
        veTau.setHanhKhach(hanhKhach);
        veTau.setChuyenTau(chuyenTau);
        veTau.setGhe(ghe);
        veTau.setBangGia(giaVe);
        veTau.setTinhTrangVe(tinhTrangVe);

        // Lưu vé tàu
        return veTauRepository.save(veTau);
    }

    /**
     * Tạo response cho đặt vé
     */
    private DatVeResponse createDatVeResponse(DatVe datVe, List<VeTau> danhSachVe) {
        DatVeResponse response = new DatVeResponse();
        response.setMaDatVe(datVe.getMaDatVe());
        response.setTrangThai(datVe.getTrangThai());

        // Có thể thêm thông tin chi tiết về người đặt vé và danh sách vé nếu cần

        return response;
    }

    /**
     * Tính giá vé theo loại khách hàng
     * 
     * @param giaTien   Giá vé gốc
     * @param loaiKhach Loại khách hàng
     * @return Giá vé sau khi tính toán
     */
    private BigDecimal tinhGiaVeTheoLoaiKhach(BigDecimal giaTien, String loaiKhach) {
        if (loaiKhach == null) {
            return giaTien;
        }

        switch (loaiKhach) {
            case "TRE_EM":
                return giaTien.multiply(new BigDecimal("0.5")); // Giảm 50% cho trẻ em
            case "NGUOI_CAO_TUOI":
                return giaTien.multiply(new BigDecimal("0.7")); // Giảm 30% cho người cao tuổi
            case "SINH_VIEN":
                return giaTien.multiply(new BigDecimal("0.8")); // Giảm 20% cho sinh viên
            default:
                return giaTien; // Giá gốc cho người lớn và các trường hợp khác
        }
    }
}